<style>
    .mobile-header {
        background: linear-gradient(45deg, #4CAF50, #45a049);
        color: white;
        padding: 15px;
        border-radius: 10px;
        margin-bottom: 20px;
        text-align: center;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
    }
    
    .mobile-header h2 {
        font-size: 1.5em;
        margin-bottom: 5px;
    }
    
    .mobile-header p {
        font-size: 0.9em;
        opacity: 0.9;
    }
    
    .connection-status {
        background: rgba(76, 175, 80, 0.1);
        border: 2px solid #4CAF50;
        border-radius: 10px;
        padding: 15px;
        margin-bottom: 20px;
        text-align: center;
        color: #4CAF50;
        font-weight: bold;
    }
    
    .connection-status.connected {
        background: rgba(76, 175, 80, 0.2);
        animation: pulse 2s infinite;
    }
    
    @keyframes pulse {
        0% { opacity: 1; }
        50% { opacity: 0.7; }
        100% { opacity: 1; }
    }
    
    .mobile-content {
        background: white;
        border-radius: 15px;
        padding: 25px;
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
        margin-bottom: 20px;
        min-height: 300px;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        text-align: center;
    }
    
    .mobile-content-text {
        font-size: 20px;
        line-height: 1.6;
        margin-bottom: 15px;
        word-wrap: break-word;
    }
    
    .mobile-content-image {
        max-width: 100%;
        max-height: 250px;
        border-radius: 10px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    }
    
    .sync-indicator {
        position: fixed;
        top: 10px;
        right: 10px;
        background: #4CAF50;
        color: white;
        padding: 8px 12px;
        border-radius: 20px;
        font-size: 12px;
        z-index: 1000;
        opacity: 0;
        transition: opacity 0.3s;
    }
    
    .sync-indicator.show {
        opacity: 1;
    }
    
    .offline-message {
        background: rgba(244, 67, 54, 0.1);
        border: 2px solid #f44336;
        border-radius: 10px;
        padding: 15px;
        margin-bottom: 20px;
        text-align: center;
        color: #f44336;
        font-weight: bold;
    }
    
    .reconnect-btn {
        background: #ff9800;
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 5px;
        cursor: pointer;
        margin-top: 10px;
    }
    
    .reconnect-btn:hover {
        background: #f57c00;
    }
</style>

<div class="mobile-header">
    <h2>üì± Connected to Game Hub</h2>
    <p>You're now synchronized with the Raspberry Pi display</p>
</div>

<div class="connection-status connected" id="connection-status">
    ‚úÖ Connected and synchronized
</div>

<div class="mobile-content" id="mobile-content" {{#if activeContent}}style="background-color: {{activeContent.backgroundColor}}"{{/if}}>
    {{#if activeContent}}
        <div class="mobile-content-text" id="mobile-content-text" 
             style="color: {{activeContent.textColor}}; font-size: {{activeContent.fontSize}}px;">
            {{{activeContent.textContent}}}
        </div>
        {{#if activeContent.imageUrl}}
            <img src="{{activeContent.imageUrl}}" alt="Content Image" class="mobile-content-image" id="mobile-content-image">
        {{/if}}
    {{else}}
        <div class="mobile-content-text loading">
            Waiting for content from the Pi...
        </div>
    {{/if}}
</div>

<div style="background: rgba(255, 255, 255, 0.1); border-radius: 10px; padding: 15px; text-align: center; margin-top: 20px;">
    <p style="color: rgba(255, 255, 255, 0.8); font-size: 14px;">
        üîÑ Content updates in real-time<br>
        üìä Device ID: {{device.sessionId}}
    </p>
    <div style="margin-top: 10px;">
        <a href="/debug/" style="color: #4CAF50; text-decoration: none; background: rgba(76, 175, 80, 0.2); padding: 8px 16px; border-radius: 20px; font-size: 12px;">
            üîß Debug Connection
        </a>
    </div>
</div>

<div class="sync-indicator" id="sync-indicator">
    Syncing...
</div>

<script>
    let socket;
    let connectionAttempts = 0;
    const maxConnectionAttempts = 5;
    
    function initializeSocket() {
        connectionAttempts++;
        console.log(`üîÑ Mobile connection attempt #${connectionAttempts}`);
        
        // Use the same robust Socket.IO configuration as debug page
        socket = io({
            transports: ['websocket', 'polling'],
            upgrade: true,
            rememberUpgrade: true,
            timeout: 10000,
            forceNew: true
        });
        
        socket.on('connect', function() {
            connectionAttempts = 0;
            console.log('‚úÖ Mobile WebSocket connected, ID:', socket.id);
            updateConnectionStatus(true);
            showSyncIndicator();
            
            // Request current active content on connect
            socket.emit('get_active_content');
        });
        
        socket.on('connect_error', function(error) {
            console.error('‚ùå Mobile connection error:', error.message || error);
            updateConnectionStatus(false);
            
            // Retry connection with exponential backoff (same as debug page)
            if (connectionAttempts < maxConnectionAttempts) {
                const delay = 2000 * connectionAttempts;
                console.log(`üîÑ Retrying mobile connection in ${delay}ms...`);
                setTimeout(() => {
                    initializeSocket();
                }, delay);
            } else {
                console.log('üö´ Mobile: Max connection attempts reached');
                showConnectionError('Connection failed - check network');
            }
        });
        
        socket.on('disconnect', function(reason) {
            console.log('‚ùå Mobile disconnected:', reason);
            updateConnectionStatus(false);
            
            // Auto-reconnect for server disconnects (same logic as debug page)
            if (reason === 'io server disconnect') {
                console.log('üîÑ Server disconnected mobile, attempting reconnect...');
                socket.connect();
            }
        });
        
        socket.on('content_update', function(data) {
            console.log('üì± Mobile received content update:', data.title || 'Unknown');
            updateContent(data);
            showSyncIndicator();
        });
        
        // Listen for admin test broadcasts
        socket.on('admin_test_response', function(data) {
            console.log('üß™ Mobile received test broadcast:', data);
            showContentUpdate();
        });
        
        // Handle stats updates
        socket.on('stats_update', function(data) {
            console.log(`üìä Mobile stats: ${data.connected_websockets} clients connected`);
        });
    }
    
    // Enhanced content update function with better error handling
    function updateContent(content) {
        console.log('üîÑ Updating mobile content with:', content);
        
        try {
            const mobileContent = document.getElementById('mobile-content');
            if (!mobileContent) {
                console.error('‚ùå Mobile content container not found');
                showConnectionError('Content container missing');
                return;
            }
            
            // Validate content object
            if (!content || typeof content !== 'object') {
                console.error('‚ùå Invalid content object:', content);
                showConnectionError('Invalid content received');
                return;
            }
            
            // Clear existing content
            mobileContent.innerHTML = '';
            
            // Apply background color
            if (content.background_color) {
                mobileContent.style.backgroundColor = content.background_color;
                console.log('üé® Applied background color:', content.background_color);
            }
            
            // Add text content
            if (content.text_content) {
                try {
                    const textElement = document.createElement('div');
                    textElement.className = 'mobile-content-text';
                    textElement.id = 'mobile-content-text';
                    textElement.innerHTML = content.text_content;
                    
                    if (content.text_color) {
                        textElement.style.color = content.text_color;
                    }
                    if (content.font_size) {
                        textElement.style.fontSize = content.font_size + 'px';
                    }
                    
                    mobileContent.appendChild(textElement);
                    console.log('üìù Added text content:', content.text_content.substring(0, 50));
                } catch (textError) {
                    console.error('‚ùå Error adding text content:', textError);
                }
            }
            
            // Add image content
            if (content.image_url) {
                try {
                    const imageElement = document.createElement('img');
                    imageElement.className = 'mobile-content-image';
                    imageElement.id = 'mobile-content-image';
                    imageElement.src = content.image_url;
                    imageElement.alt = 'Content Image';
                    imageElement.style.display = 'block';
                    
                    // Handle image load errors
                    imageElement.onerror = function() {
                        console.error('‚ùå Failed to load image:', content.image_url);
                        this.style.display = 'none';
                    };
                    
                    imageElement.onload = function() {
                        console.log('üñºÔ∏è Image loaded successfully:', content.image_url);
                    };
                    
                    mobileContent.appendChild(imageElement);
                } catch (imageError) {
                    console.error('‚ùå Error adding image content:', imageError);
                }
            }
            
            // Add smooth transition effect
            mobileContent.style.transition = 'all 0.3s ease';
            mobileContent.style.transform = 'scale(0.95)';
            mobileContent.style.opacity = '0.8';
            
            setTimeout(() => {
                mobileContent.style.transform = 'scale(1)';
                mobileContent.style.opacity = '1';
            }, 100);
            
            // Show success indicator
            showContentUpdate();
            console.log('‚úÖ Content update completed successfully');
            
        } catch (error) {
            console.error('‚ùå Critical error in updateContent:', error);
            showConnectionError('Failed to update content');
        }
    }
    
    function showContentUpdate() {
        const indicator = document.createElement('div');
        indicator.style.cssText = `
            position: fixed;
            top: 10px;
            left: 50%;
            transform: translateX(-50%);
            background: #4CAF50;
            color: white;
            padding: 8px 16px;
            border-radius: 20px;
            font-size: 12px;
            z-index: 10000;
            animation: slideDown 0.3s ease;
        `;
        indicator.innerHTML = '‚úÖ Content Updated!';
        document.body.appendChild(indicator);
        
        setTimeout(() => {
            if (indicator.parentElement) {
                indicator.remove();
            }
        }, 2000);
    }
    
    function showConnectionError(message) {
        const indicator = document.createElement('div');
        indicator.style.cssText = `
            position: fixed;
            top: 10px;
            left: 50%;
            transform: translateX(-50%);
            background: #f44336;
            color: white;
            padding: 8px 16px;
            border-radius: 20px;
            font-size: 12px;
            z-index: 10000;
            animation: slideDown 0.3s ease;
        `;
        indicator.innerHTML = `‚ùå ${message}`;
        document.body.appendChild(indicator);
        
        setTimeout(() => {
            if (indicator.parentElement) {
                indicator.remove();
            }
        }, 4000);
    }
    
    function updateConnectionStatus(connected) {
        const statusElement = document.getElementById('connection-status');
        if (!statusElement) return;
        
        if (connected) {
            statusElement.className = 'connection-status connected';
            statusElement.innerHTML = '‚úÖ Connected and synchronized';
            statusElement.style.borderColor = '#4CAF50';
            statusElement.style.color = '#4CAF50';
            
            // Hide offline message if it exists
            const offlineMessage = document.getElementById('offline-message');
            if (offlineMessage) {
                offlineMessage.remove();
            }
        } else {
            statusElement.className = 'connection-status';
            statusElement.innerHTML = '‚ùå Connection lost - Trying to reconnect...';
            statusElement.style.borderColor = '#f44336';
            statusElement.style.color = '#f44336';
            
            // Show offline message
            if (!document.getElementById('offline-message')) {
                const offlineMessage = document.createElement('div');
                offlineMessage.id = 'offline-message';
                offlineMessage.className = 'offline-message';
                offlineMessage.innerHTML = `
                    ‚ö†Ô∏è Lost connection to the Game Hub<br>
                    Attempting to reconnect... (${connectionAttempts}/${maxConnectionAttempts})
                    <br>
                    <button class="reconnect-btn" onclick="forceReconnect()">
                        Force Reconnect
                    </button>
                    <button class="reconnect-btn" onclick="location.reload()">
                        Reload Page
                    </button>
                `;
                statusElement.parentNode.insertBefore(offlineMessage, statusElement.nextSibling);
            }
        }
    }
    
    function showSyncIndicator() {
        const indicator = document.getElementById('sync-indicator');
        if (indicator) {
            indicator.classList.add('show');
            setTimeout(() => {
                indicator.classList.remove('show');
            }, 1500);
        }
    }
    
    function forceReconnect() {
        console.log('üîÑ Mobile: Force reconnecting...');
        if (socket) {
            socket.disconnect();
        }
        connectionAttempts = 0;
        setTimeout(initializeSocket, 1000);
    }
    
    // Send heartbeat to keep connection alive and track device
    function sendHeartbeat() {
        if (socket && socket.connected) {
            socket.emit('device_heartbeat', {
                'session_id': '{{device.sessionId}}',
                'timestamp': new Date().toISOString(),
                'device_type': 'mobile'
            });
            console.log('üíì Mobile heartbeat sent');
        } else {
            console.log('üíî Mobile heartbeat skipped - not connected');
        }
    }
    
    function requestContent() {
        if (socket && socket.connected) {
            console.log('üì• Mobile requesting active content...');
            socket.emit('get_active_content');
        } else {
            console.log('‚ùå Mobile: Cannot request content - not connected');
        }
    }
    
    // Initialize connection when page loads (same as debug page)
    window.addEventListener('load', () => {
        console.log('üöÄ Mobile page loaded, initializing WebSocket...');
        initializeSocket();
    });
    
    // Enhanced page visibility handling
    document.addEventListener('visibilitychange', () => {
        if (document.hidden) {
            console.log('üì± Mobile page is now hidden');
        } else {
            console.log('üì± Mobile page is now visible');
            if (!socket || !socket.connected) {
                console.log('üîÑ Mobile page visible but not connected, attempting reconnect...');
                forceReconnect();
            } else {
                // Request fresh content when page becomes visible
                requestContent();
            }
        }
    });
    
    // Send heartbeat every 30 seconds (same as debug page interval)
    setInterval(sendHeartbeat, 30000);
    
    // Debug connection status every 15 seconds
    setInterval(() => {
        console.log('üîç Mobile connection status:', {
            connected: socket ? socket.connected : false,
            id: socket ? socket.id : null,
            connectionAttempts: connectionAttempts,
            timestamp: new Date().toISOString()
        });
    }, 15000);
</script> 