<style>
    .admin-panel {
        background: rgba(255, 255, 255, 0.95);
        border-radius: 15px;
        padding: 30px;
        margin-bottom: 20px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
    }
    
    .form-group {
        margin-bottom: 20px;
    }
    
    .form-group label {
        display: block;
        margin-bottom: 5px;
        font-weight: bold;
        color: #333;
    }
    
    .form-control {
        width: 100%;
        padding: 12px;
        border: 2px solid #ddd;
        border-radius: 8px;
        font-size: 16px;
        transition: border-color 0.3s;
    }
    
    .form-control:focus {
        outline: none;
        border-color: #4CAF50;
    }
    
    .form-control textarea {
        resize: vertical;
        min-height: 100px;
    }
    
    .color-picker {
        display: flex;
        gap: 10px;
        align-items: center;
    }
    
    .color-input {
        width: 50px;
        height: 40px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }
    
    .content-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 20px;
        margin-top: 20px;
    }
    
    .content-card {
        background: white;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        border: 2px solid #ddd;
        transition: all 0.3s;
    }
    
    .content-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
    }
    
    .content-card.active {
        border-color: #4CAF50;
        background: linear-gradient(45deg, rgba(76, 175, 80, 0.1), rgba(76, 175, 80, 0.05));
        box-shadow: 0 8px 25px rgba(76, 175, 80, 0.3);
    }
    
    .content-card.activating {
        border-color: #ff9800;
        background: linear-gradient(45deg, rgba(255, 152, 0, 0.1), rgba(255, 152, 0, 0.05));
        animation: pulse 1.5s ease-in-out infinite;
    }
    
    .content-card.error {
        border-color: #f44336;
        background: linear-gradient(45deg, rgba(244, 67, 54, 0.1), rgba(244, 67, 54, 0.05));
        box-shadow: 0 8px 25px rgba(244, 67, 54, 0.3);
    }
    
    @keyframes pulse {
        0% { transform: scale(1); }
        50% { transform: scale(1.02); }
        100% { transform: scale(1); }
    }
    
    .content-card h3 {
        margin-bottom: 10px;
        color: #333;
    }
    
    .content-card p {
        color: #666;
        margin-bottom: 15px;
    }
    
    .content-card .content-preview {
        background: #f9f9f9;
        padding: 15px;
        border-radius: 8px;
        margin-bottom: 15px;
        min-height: 100px;
        display: flex;
        align-items: center;
        justify-content: center;
        text-align: center;
    }
    
    .content-card .content-preview img {
        max-width: 100%;
        max-height: 80px;
        border-radius: 5px;
    }
    
    .btn-group {
        display: flex;
        gap: 10px;
        margin-top: 10px;
    }
    
    .btn-small {
        padding: 8px 16px;
        font-size: 14px;
    }
    
    .alert {
        padding: 15px;
        border-radius: 8px;
        margin-bottom: 20px;
        border: 1px solid;
    }
    
    .alert-success {
        background: rgba(76, 175, 80, 0.1);
        border-color: #4CAF50;
        color: #4CAF50;
    }
    
    .alert-danger {
        background: rgba(244, 67, 54, 0.1);
        border-color: #f44336;
        color: #f44336;
    }
    
    .stats-dashboard {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
    }
    
    .stat-card {
        background: white;
        padding: 20px;
        border-radius: 10px;
        text-align: center;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
    }
    
    .stat-card h3 {
        font-size: 2em;
        color: #4CAF50;
        margin-bottom: 10px;
    }
    
    .stat-card p {
        color: #666;
        font-size: 14px;
    }
</style>

<div class="header">
    <h1>‚öôÔ∏è Content Management</h1>
    <p>Create and manage content for your Raspberry Pi Game Hub</p>
</div>

<div class="stats-dashboard">
    <div class="stat-card">
        <h3 id="total-content">{{contents.length}}</h3>
        <p>Total Content Items</p>
    </div>
    <div class="stat-card">
        <h3 id="active-content-count">{{#if activeContent}}1{{else}}0{{/if}}</h3>
        <p>Active Content</p>
    </div>
    <div class="stat-card">
        <h3 id="connected-devices">0</h3>
        <p>Connected Devices</p>
    </div>
</div>

<div class="admin-panel">
    <h2>Create New Content</h2>
    
    <div id="alert-container"></div>
    
    <form id="content-form" enctype="multipart/form-data">
        <div class="form-group">
            <label for="title">Title</label>
            <input type="text" class="form-control" id="title" name="title" required>
        </div>
        
        <div class="form-group">
            <label for="content_type">Content Type</label>
            <select class="form-control" id="content_type" name="content_type">
                <option value="text">Text Only</option>
                <option value="image">Image Only</option>
                <option value="mixed">Text + Image</option>
            </select>
        </div>
        
        <div class="form-group">
            <label for="text_content">Text Content</label>
            <textarea class="form-control" id="text_content" name="text_content" rows="4" placeholder="Enter your text content here..."></textarea>
        </div>
        
        <div class="form-group">
            <label for="image">Image (optional)</label>
            <input type="file" class="form-control" id="image" name="image" accept="image/*">
        </div>
        
        <div class="form-group">
            <label>Background Color</label>
            <div class="color-picker">
                <input type="color" class="color-input" id="background_color" name="background_color" value="#ffffff">
                <span>Background</span>
            </div>
        </div>
        
        <div class="form-group">
            <label>Text Color</label>
            <div class="color-picker">
                <input type="color" class="color-input" id="text_color" name="text_color" value="#000000">
                <span>Text</span>
            </div>
        </div>
        
        <div class="form-group">
            <label for="font_size">Font Size (px)</label>
            <input type="number" class="form-control" id="font_size" name="font_size" value="24" min="12" max="72">
        </div>
        
        <button type="submit" class="btn btn-primary">Create Content</button>
    </form>
</div>

<div class="admin-panel">
    <h2>Existing Content</h2>
    
    <div class="content-grid">
        {{#each contents}}
        <div class="content-card {{#if isActive}}active{{/if}}" data-content-id="{{id}}">
            <h3>{{title}}</h3>
            <p>
                <strong>Type:</strong> {{contentType}}<br>
                <strong>Created:</strong> {{createdAt}}
            </p>
            
            <div class="content-preview" style="background-color: {{backgroundColor}};">
                {{#if textContent}}
                    <div style="color: {{textColor}}; font-size: {{fontSize}}px;">
                        {{textContent}}
                    </div>
                {{/if}}
                {{#if imageUrl}}
                    <img src="{{imageUrl}}" alt="Content Image">
                {{/if}}
            </div>
            
            <div class="btn-group">
                {{#if isActive}}
                    <button class="btn btn-success btn-small" disabled>Active</button>
                {{else}}
                    <button class="btn btn-primary btn-small" onclick="activateContent('{{id}}')">
                        Activate
                    </button>
                {{/if}}
                <button class="btn btn-danger btn-small" onclick="deleteContent('{{id}}')">
                    Delete
                </button>
            </div>
        </div>
        {{else}}
        <div style="grid-column: 1 / -1; text-align: center; padding: 40px; color: #666;">
            <p>No content created yet. Create your first content item above!</p>
        </div>
        {{/each}}
    </div>
</div>

<div style="text-align: center; margin-top: 20px;">
    <a href="/" class="btn btn-primary">
        ‚Üê Back to Pi Display
    </a>
</div>

<script>
    // Initialize Socket.IO connection for admin panel testing
    const socket = io({
        transports: ['websocket', 'polling'],
        upgrade: true,
        rememberUpgrade: true
    });
    
    let connectedClients = 0;
    
    // Connection event handlers
    socket.on('connect', function() {
        console.log('üîß Admin panel connected to server, ID:', socket.id);
        updateConnectionStatus(true);
    });
    
    socket.on('disconnect', function(reason) {
        console.log('‚ùå Admin panel disconnected, reason:', reason);
        updateConnectionStatus(false);
    });
    
    // Enhanced activate content with instant visual feedback
    async function activateContent(contentId) {
        try {
            console.log('üîß Admin activating content:', contentId);
            
            // Immediately update UI to show activation in progress
            updateCardStatus(contentId, 'activating');
            showAlert('‚ö° Activating content...', 'info');
            
            const response = await fetch('/api/content/update/', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    content_id: contentId
                })
            });
            
            const data = await response.json();
            console.log('üîß Server response:', data);
            
            if (data.success) {
                // Immediate visual feedback
                updateCardStatus(contentId, 'active');
                showAlert('‚úÖ Content activated successfully!', 'success');
                
                // Update stats immediately
                updateStats();
                
                // NO PAGE RELOAD - real-time updates only!
                console.log('‚úÖ Content activated successfully without page reload');
            } else {
                updateCardStatus(contentId, 'error');
                showAlert('‚ùå Error: ' + data.message, 'danger');
            }
        } catch (error) {
            console.error('Error activating content:', error);
            updateCardStatus(contentId, 'error');
            showAlert('‚ùå Error activating content: ' + error.message, 'danger');
        }
    }
    
    // New function to update card visual status immediately
    function updateCardStatus(contentId, status) {
        const card = document.querySelector(`[data-content-id="${contentId}"]`);
        if (!card) return;
        
        // Remove all status classes
        card.classList.remove('active', 'activating', 'error');
        
        // Remove other active cards if this one is being activated
        if (status === 'activating' || status === 'active') {
            document.querySelectorAll('.content-card').forEach(c => {
                if (c !== card) {
                    c.classList.remove('active', 'activating');
                }
            });
        }
        
        // Add new status
        card.classList.add(status);
        
        // Update button text based on status
        const button = card.querySelector('.btn');
        if (button) {
            switch(status) {
                case 'activating':
                    button.textContent = '‚ö° Activating...';
                    button.disabled = true;
                    break;
                case 'active':
                    button.textContent = '‚úÖ Active';
                    button.disabled = false;
                    // Add a brief highlight effect
                    card.style.transform = 'scale(1.02)';
                    card.style.transition = 'all 0.3s ease';
                    setTimeout(() => {
                        card.style.transform = 'scale(1)';
                    }, 300);
                    break;
                case 'error':
                    button.textContent = '‚ùå Error';
                    button.disabled = false;
                    break;
                default:
                    button.textContent = 'üöÄ Activate';
                    button.disabled = false;
            }
        }
    }
    
    // Enhanced content update listener for instant UI updates
    socket.on('content_update', function(data) {
        console.log('üì¢ Admin panel received broadcast confirmation:', data);
        
        // Update the specific card that was activated
        if (data.id) {
            updateCardStatus(data.id, 'active');
        }
        
        // Show success with immediate feedback
        showAlert(`üéØ Content "${data.title}" is now live on all devices!`, 'success');
        
        // Update connection count if available
        if (data.connectedClients) {
            updateConnectionCount(data.connectedClients);
        }
    });
    
    function updateConnectionStatus(connected) {
        let indicator = document.getElementById('admin-connection-indicator');
        
        if (!indicator) {
            indicator = document.createElement('div');
            indicator.id = 'admin-connection-indicator';
            indicator.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                padding: 10px 15px;
                border-radius: 25px;
                font-size: 14px;
                font-weight: bold;
                z-index: 1000;
                transition: all 0.3s ease;
                box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
            `;
            document.body.appendChild(indicator);
        }
        
        if (connected) {
            indicator.style.backgroundColor = '#4CAF50';
            indicator.style.color = 'white';
            indicator.innerHTML = 'üü¢ WebSocket Connected';
        } else {
            indicator.style.backgroundColor = '#f44336';
            indicator.style.color = 'white';
            indicator.innerHTML = 'üî¥ WebSocket Disconnected';
        }
    }

    // Handle form submission
    document.getElementById('content-form').addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const formData = new FormData(this);
        
        try {
            const response = await fetch('/api/content/create/', {
                method: 'POST',
                body: formData
            });
            
            const data = await response.json();
            
            if (data.success) {
                showAlert('‚úÖ Content created successfully!', 'success');
                this.reset();
                // Quick reload for new content - much faster than before
                setTimeout(() => {
                    location.reload();
                }, 500);
            } else {
                showAlert('Error: ' + data.message, 'danger');
            }
        } catch (error) {
            showAlert('Error creating content: ' + error.message, 'danger');
        }
    });
    
    // Test broadcast function
    function testBroadcast() {
        console.log('üß™ Testing WebSocket broadcast...');
        
        if (socket.connected) {
            // Emit a test event
            socket.emit('admin_test', {
                message: 'Test broadcast from admin panel',
                timestamp: new Date().toISOString()
            });
            showAlert('Test broadcast sent via WebSocket!', 'success');
        } else {
            showAlert('WebSocket not connected - cannot test broadcast', 'danger');
        }
    }
    
    // Delete content (placeholder - you'd need to implement this endpoint)
    function deleteContent(contentId) {
        if (confirm('Are you sure you want to delete this content?')) {
            showAlert('Delete functionality would be implemented here', 'danger');
        }
    }
    
    // Enhanced alert messages with better styling
    function showAlert(message, type) {
        const alertContainer = document.getElementById('alert-container');
        const alert = document.createElement('div');
        alert.className = `alert alert-${type}`;
        alert.innerHTML = `
            <strong>${type === 'success' ? '‚úÖ' : '‚ùå'}</strong> ${message}
            <button onclick="this.parentElement.remove()" style="float: right; background: none; border: none; font-size: 18px; cursor: pointer;">&times;</button>
        `;
        
        alertContainer.appendChild(alert);
        
        // Auto-remove after 8 seconds (longer for important messages)
        setTimeout(() => {
            if (alert.parentElement) {
                alert.remove();
            }
        }, 8000);
    }
    
    // Update stats in real-time
    async function updateStats() {
        try {
            const response = await fetch('/api/stats/');
            const data = await response.json();
            
            const connectedDevicesElement = document.getElementById('connected-devices');
            if (connectedDevicesElement) {
                connectedDevicesElement.textContent = data.active_devices || 0;
                connectedClients = data.active_devices || 0;
            }
        } catch (error) {
            console.error('Error updating stats:', error);
        }
    }
    
    // Update connection count display
    function updateConnectionCount(count) {
        const connectedDevicesElement = document.getElementById('connected-devices');
        if (connectedDevicesElement) {
            connectedDevicesElement.textContent = count || 0;
            connectedClients = count || 0;
        }
    }
    
    // Update stats every 10 seconds for better real-time feedback
    setInterval(updateStats, 10000);
    updateStats(); // Initial load
    
    // Add debugging info
    setInterval(() => {
        console.log('üîß Admin Panel Status:', {
            socketConnected: socket.connected,
            socketId: socket.id,
            connectedClients: connectedClients,
            timestamp: new Date().toISOString()
        });
    }, 30000);
</script>

<!-- Add test button for debugging -->
<div style="position: fixed; bottom: 20px; right: 20px; z-index: 1000;">
    <button onclick="testBroadcast()" class="btn btn-primary btn-small">
        üß™ Test Broadcast
    </button>
</div> 