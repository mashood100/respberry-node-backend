<style>
    .admin-panel {
        background: rgba(255, 255, 255, 0.95);
        border-radius: 15px;
        padding: 30px;
        margin-bottom: 20px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
    }
    
    .form-group {
        margin-bottom: 20px;
    }
    
    .form-group label {
        display: block;
        margin-bottom: 5px;
        font-weight: bold;
        color: #333;
    }
    
    .form-control {
        width: 100%;
        padding: 12px;
        border: 2px solid #ddd;
        border-radius: 8px;
        font-size: 16px;
        transition: border-color 0.3s;
    }
    
    .form-control:focus {
        outline: none;
        border-color: #4CAF50;
    }
    
    .form-control textarea {
        resize: vertical;
        min-height: 100px;
    }
    
    .color-picker {
        display: flex;
        gap: 10px;
        align-items: center;
    }
    
    .color-input {
        width: 50px;
        height: 40px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }
    
    .content-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 20px;
        margin-top: 20px;
    }
    
    .content-card {
        background: white;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        border: 2px solid #ddd;
        transition: all 0.3s;
    }
    
    .content-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
    }
    
    .content-card.active {
        border-color: #4CAF50;
        background: linear-gradient(45deg, rgba(76, 175, 80, 0.1), rgba(76, 175, 80, 0.05));
    }
    
    .content-card h3 {
        margin-bottom: 10px;
        color: #333;
    }
    
    .content-card p {
        color: #666;
        margin-bottom: 15px;
    }
    
    .content-card .content-preview {
        background: #f9f9f9;
        padding: 15px;
        border-radius: 8px;
        margin-bottom: 15px;
        min-height: 100px;
        display: flex;
        align-items: center;
        justify-content: center;
        text-align: center;
    }
    
    .content-card .content-preview img {
        max-width: 100%;
        max-height: 80px;
        border-radius: 5px;
    }
    
    .btn-group {
        display: flex;
        gap: 10px;
        margin-top: 10px;
    }
    
    .btn-small {
        padding: 8px 16px;
        font-size: 14px;
    }
    
    .alert {
        padding: 15px;
        border-radius: 8px;
        margin-bottom: 20px;
        border: 1px solid;
    }
    
    .alert-success {
        background: rgba(76, 175, 80, 0.1);
        border-color: #4CAF50;
        color: #4CAF50;
    }
    
    .alert-danger {
        background: rgba(244, 67, 54, 0.1);
        border-color: #f44336;
        color: #f44336;
    }
    
    .stats-dashboard {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
    }
    
    .stat-card {
        background: white;
        padding: 20px;
        border-radius: 10px;
        text-align: center;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
    }
    
    .stat-card h3 {
        font-size: 2em;
        color: #4CAF50;
        margin-bottom: 10px;
    }
    
    .stat-card p {
        color: #666;
        font-size: 14px;
    }
</style>

<div class="header">
    <h1>⚙️ Content Management</h1>
    <p>Create and manage content for your Raspberry Pi Game Hub</p>
</div>

<div class="stats-dashboard">
    <div class="stat-card">
        <h3 id="total-content">{{contents.length}}</h3>
        <p>Total Content Items</p>
    </div>
    <div class="stat-card">
        <h3 id="active-content-count">{{#if activeContent}}1{{else}}0{{/if}}</h3>
        <p>Active Content</p>
    </div>
    <div class="stat-card">
        <h3 id="connected-devices">0</h3>
        <p>Connected Devices</p>
    </div>
</div>

<div class="admin-panel">
    <h2>Create New Content</h2>
    
    <div id="alert-container"></div>
    
    <form id="content-form" enctype="multipart/form-data">
        <div class="form-group">
            <label for="title">Title</label>
            <input type="text" class="form-control" id="title" name="title" required>
        </div>
        
        <div class="form-group">
            <label for="content_type">Content Type</label>
            <select class="form-control" id="content_type" name="content_type">
                <option value="text">Text Only</option>
                <option value="image">Image Only</option>
                <option value="mixed">Text + Image</option>
            </select>
        </div>
        
        <div class="form-group">
            <label for="text_content">Text Content</label>
            <textarea class="form-control" id="text_content" name="text_content" rows="4" placeholder="Enter your text content here..."></textarea>
        </div>
        
        <div class="form-group">
            <label for="image">Image (optional)</label>
            <input type="file" class="form-control" id="image" name="image" accept="image/*">
        </div>
        
        <div class="form-group">
            <label>Background Color</label>
            <div class="color-picker">
                <input type="color" class="color-input" id="background_color" name="background_color" value="#ffffff">
                <span>Background</span>
            </div>
        </div>
        
        <div class="form-group">
            <label>Text Color</label>
            <div class="color-picker">
                <input type="color" class="color-input" id="text_color" name="text_color" value="#000000">
                <span>Text</span>
            </div>
        </div>
        
        <div class="form-group">
            <label for="font_size">Font Size (px)</label>
            <input type="number" class="form-control" id="font_size" name="font_size" value="24" min="12" max="72">
        </div>
        
        <button type="submit" class="btn btn-primary">Create Content</button>
    </form>
</div>

<div class="admin-panel">
    <h2>Existing Content</h2>
    
    <div class="content-grid">
        {{#each contents}}
        <div class="content-card {{#if isActive}}active{{/if}}" data-content-id="{{id}}">
            <h3>{{title}}</h3>
            <p>
                <strong>Type:</strong> {{contentType}}<br>
                <strong>Created:</strong> {{createdAt}}
            </p>
            
            <div class="content-preview" style="background-color: {{backgroundColor}};">
                {{#if textContent}}
                    <div style="color: {{textColor}}; font-size: {{fontSize}}px;">
                        {{textContent}}
                    </div>
                {{/if}}
                {{#if imageUrl}}
                    <img src="{{imageUrl}}" alt="Content Image">
                {{/if}}
            </div>
            
            <div class="btn-group">
                {{#if isActive}}
                    <button class="btn btn-success btn-small" disabled>Active</button>
                {{else}}
                    <button class="btn btn-primary btn-small" onclick="activateContent('{{id}}')">
                        Activate
                    </button>
                {{/if}}
                <button class="btn btn-danger btn-small" onclick="deleteContent('{{id}}')">
                    Delete
                </button>
            </div>
        </div>
        {{else}}
        <div style="grid-column: 1 / -1; text-align: center; padding: 40px; color: #666;">
            <p>No content created yet. Create your first content item above!</p>
        </div>
        {{/each}}
    </div>
</div>

<div style="text-align: center; margin-top: 20px;">
    <a href="/" class="btn btn-primary">
        ← Back to Pi Display
    </a>
</div>

<script>
    // Handle form submission
    document.getElementById('content-form').addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const formData = new FormData(this);
        
        try {
            const response = await fetch('/api/content/create/', {
                method: 'POST',
                body: formData
            });
            
            const data = await response.json();
            
            if (data.success) {
                showAlert('Content created successfully!', 'success');
                this.reset();
                setTimeout(() => {
                    location.reload();
                }, 1500);
            } else {
                showAlert('Error: ' + data.message, 'danger');
            }
        } catch (error) {
            showAlert('Error creating content: ' + error.message, 'danger');
        }
    });
    
    // Activate content
    async function activateContent(contentId) {
        try {
            const response = await fetch('/api/content/update/', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    content_id: contentId
                })
            });
            
            const data = await response.json();
            
            if (data.success) {
                showAlert('Content activated successfully!', 'success');
                setTimeout(() => {
                    location.reload();
                }, 1000);
            } else {
                showAlert('Error: ' + data.message, 'danger');
            }
        } catch (error) {
            showAlert('Error activating content: ' + error.message, 'danger');
        }
    }
    
    // Delete content (placeholder - you'd need to implement this endpoint)
    function deleteContent(contentId) {
        if (confirm('Are you sure you want to delete this content?')) {
            showAlert('Delete functionality would be implemented here', 'danger');
        }
    }
    
    // Show alert messages
    function showAlert(message, type) {
        const alertContainer = document.getElementById('alert-container');
        const alert = document.createElement('div');
        alert.className = `alert alert-${type}`;
        alert.textContent = message;
        
        alertContainer.appendChild(alert);
        
        setTimeout(() => {
            alert.remove();
        }, 5000);
    }
    
    // Update stats in real-time
    async function updateStats() {
        try {
            const response = await fetch('/api/stats/');
            const data = await response.json();
            
            document.getElementById('connected-devices').textContent = data.active_devices || 0;
        } catch (error) {
            console.error('Error updating stats:', error);
        }
    }
    
    // Update stats every 30 seconds
    setInterval(updateStats, 30000);
    updateStats(); // Initial load
</script> 