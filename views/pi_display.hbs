<div class="header">
  <h1>üéÆ Raspberry Pi Game Hub</h1>
  <p>Scan the QR code to connect your mobile device</p>
</div>

<div class="stats-bar">
  <div class="stat-item">
    <div class="stat-value" id="connected-devices">{{activeDevices}}</div>
    <div class="stat-label">Active Devices</div>
  </div>
  <div class="stat-item">
    <div class="stat-value" id="total-devices">{{totalDevices}}</div>
    <div class="stat-label">Total Devices</div>
  </div>
  <div class="stat-item">
    <div class="stat-value">{{currentIp}}</div>
    <div class="stat-label">Server IP</div>
  </div>
  <div class="stat-item">
    <div class="stat-value">{{hotspotName}}</div>
    <div class="stat-label">WiFi Network</div>
    <div class="stat-sublabel" style="font-size: 10px; color: #888; font-style: italic">
      {{hotspotSource}}
    </div>
  </div>
</div>

<div style="display: flex; gap: 20px; align-items: flex-start">
  <div style="flex: 2">
    <div class="content-display" id="content-display" {{#if activeContent}}style="background-color: {{activeContent.backgroundColor}}"{{/if}}>
      {{#if activeContent}}
      <div class="content-text" id="content-text" style="color: {{activeContent.textColor}}; font-size: {{activeContent.fontSize}}px;">
        {{{activeContent.textContent}}}
      </div>
      {{#if activeContent.imageUrl}}
      <img src="{{activeContent.imageUrl}}" alt="Content Image" class="content-image" id="content-image" />
      {{/if}}
      {{else}}
      <div class="content-text loading">Waiting for content...</div>
      {{/if}}
    </div>
  </div>

  <div style="flex: 1">
    <!-- WiFi QR Code - Primary -->
    <div class="qr-code" style="margin-bottom: 20px">
      <h3 style="margin-bottom: 10px; color: #333">
        üì± Step 1: Auto-Connect WiFi
      </h3>
      {{#if wifiQrCode}}
      <img src="{{wifiQrCode}}" alt="WiFi QR Code" style="max-width: 200px" />
      {{else}}
      <div style="width: 200px; height: 200px; background: #f0f0f0; display: flex; align-items: center; justify-content: center; border: 2px dashed #ccc; border-radius: 8px;">
        <div style="text-align: center; color: #666">
          <div style="font-size: 24px">‚ùå</div>
          <div style="font-size: 12px; margin-top: 5px">
            No QR Code<br />Password Missing
          </div>
        </div>
      </div>
      {{/if}}
      <p style="margin-top: 10px; color: #666; font-size: 12px">
        <strong>WiFi:</strong> {{hotspotName}}<br />
        <strong>Password:</strong> {{hotspotPassword}}<br />
        <small style="color: #888; font-style: italic">Source: {{hotspotSource}}</small>
      </p>
      {{#if passwordWarning}}
      <div style="background: #ffe6e6; border: 1px solid #ff9999; padding: 8px; border-radius: 4px; margin-top: 8px; color: #cc0000; font-size: 11px;">
        {{passwordWarning}}
      </div>
      {{/if}}
    </div>

    <!-- URL QR Code - Backup -->
    <div class="qr-code" style="margin-bottom: 20px">
      <h3 style="margin-bottom: 10px; color: #333">üåê Step 2: Open Game Hub</h3>
      <img src="{{urlQrCode}}" alt="URL QR Code" style="max-width: 200px" />
      <p style="margin-top: 10px; color: #666; font-size: 12px">
        {{mobileUrl}}
      </p>
    </div>

    <!-- Instructions -->
    <div style="background: rgba(0, 0, 0, 0.1); padding: 15px; border-radius: 8px; margin-bottom: 20px;">
      <h4 style="color: #333; margin-top: 0">How to Connect:</h4>
      <ol style="color: #666; font-size: 12px; margin: 0; padding-left: 20px">
        <li>Scan the <strong>WiFi QR code</strong> above</li>
        <li>Your phone will auto-connect to <strong>{{hotspotName}}</strong></li>
        <li>Then scan the <strong>URL QR code</strong> to open the game</li>
        <li>Or manually go to: <strong>{{mobileUrl}}</strong></li>
      </ol>
    </div>

    <div style="text-align: center">
      <a href="/admin-panel/" class="btn btn-primary">
        ‚öôÔ∏è Admin Panel
      </a>
    </div>
  </div>
</div>

<div style="margin-top: 20px; text-align: center">
  <p style="color: rgba(255, 255, 255, 0.8); font-size: 14px">
    üîó Direct WiFi Connection Mode | IP: {{currentIp}}
  </p>
</div>

<script>
  // Initialize Socket.IO connection with enhanced configuration
  const socket = io({
    transports: ['websocket', 'polling'],
    upgrade: true,
    rememberUpgrade: true
  });

  let reconnectAttempts = 0;
  const maxReconnectAttempts = 3;

  // Connection event handlers
  socket.on('connect', function() {
    console.log('üñ•Ô∏è Pi Display connected to server, ID:', socket.id);
    reconnectAttempts = 0;
    updateConnectionIndicator(true);
    
    // Request current active content on connect
    socket.emit('get_active_content');
  });

  socket.on('content_update', function(data) {
    console.log('üñ•Ô∏è Pi Display received content update:', data);
    updateContent(data);
    updateConnectionIndicator(true);
  });

  // Listen for admin test broadcasts
  socket.on('admin_test_response', function(data) {
    console.log('üß™ Pi Display received test broadcast:', data);
    updateConnectionIndicator(true);
  });

  socket.on('disconnect', function(reason) {
    console.log('‚ùå Pi Display disconnected from server, reason:', reason);
    updateConnectionIndicator(false);
    
    // Attempt to reconnect
    if (reason !== 'io client disconnect' && reconnectAttempts < maxReconnectAttempts) {
      reconnectAttempts++;
      console.log(`üîÑ Pi Display reconnection attempt ${reconnectAttempts}/${maxReconnectAttempts}`);
      setTimeout(() => {
        socket.connect();
      }, 3000);
    } else if (reconnectAttempts >= maxReconnectAttempts) {
      console.log('üîÑ Max reconnection attempts reached, reloading page...');
      setTimeout(() => {
        location.reload();
      }, 5000);
    }
  });

  socket.on('connect_error', function(error) {
    console.error('‚ùå Pi Display connection error:', error);
    updateConnectionIndicator(false);
  });

  // Enhanced content update function
  function updateContent(content) {
    console.log('üîÑ Updating Pi display content with:', content);
    
    const contentDisplay = document.getElementById('content-display');
    if (!contentDisplay) {
      console.error('‚ùå Content display container not found');
      return;
    }

    // Clear existing content
    contentDisplay.innerHTML = '';

    // Apply background color
    if (content.background_color) {
      contentDisplay.style.backgroundColor = content.background_color;
      console.log('üé® Applied background color:', content.background_color);
    }

    // Add text content
    if (content.text_content) {
      const textElement = document.createElement('div');
      textElement.className = 'content-text';
      textElement.id = 'content-text';
      textElement.innerHTML = content.text_content;
      
      if (content.text_color) {
        textElement.style.color = content.text_color;
      }
      if (content.font_size) {
        textElement.style.fontSize = content.font_size + 'px';
      }
      
      contentDisplay.appendChild(textElement);
      console.log('üìù Added text content to Pi display');
    }

    // Add image content
    if (content.image_url) {
      const imageElement = document.createElement('img');
      imageElement.className = 'content-image';
      imageElement.id = 'content-image';
      imageElement.src = content.image_url;
      imageElement.alt = 'Content Image';
      imageElement.style.display = 'block';
      
      // Handle image load errors
      imageElement.onerror = function() {
        console.error('‚ùå Failed to load image on Pi display:', content.image_url);
        this.style.display = 'none';
      };
      
      imageElement.onload = function() {
        console.log('üñºÔ∏è Image loaded successfully on Pi display');
      };
      
      contentDisplay.appendChild(imageElement);
    }

    // Add smooth transition animation
    contentDisplay.style.transition = 'all 0.5s ease';
    contentDisplay.style.opacity = '0';
    contentDisplay.style.transform = 'scale(0.98)';
    
    setTimeout(() => {
      contentDisplay.style.opacity = '1';
      contentDisplay.style.transform = 'scale(1)';
    }, 100);
    
    console.log('‚úÖ Pi display content update completed');
  }

  // Add connection status indicator
  function updateConnectionIndicator(connected) {
    let indicator = document.getElementById('connection-indicator');
    
    if (!indicator) {
      indicator = document.createElement('div');
      indicator.id = 'connection-indicator';
      indicator.style.cssText = `
        position: fixed;
        top: 20px;
        left: 20px;
        padding: 8px 12px;
        border-radius: 20px;
        font-size: 12px;
        font-weight: bold;
        z-index: 1000;
        transition: all 0.3s ease;
      `;
      document.body.appendChild(indicator);
    }
    
    if (connected) {
      indicator.style.backgroundColor = '#4CAF50';
      indicator.style.color = 'white';
      indicator.innerHTML = 'üü¢ Connected';
      indicator.style.opacity = '0.8';
    } else {
      indicator.style.backgroundColor = '#f44336';
      indicator.style.color = 'white';
      indicator.innerHTML = 'üî¥ Disconnected';
      indicator.style.opacity = '1';
    }
  }

  // Enhanced heartbeat and content sync
  setInterval(() => {
    if (socket.connected) {
      socket.emit('get_active_content');
      console.log('üíì Pi Display heartbeat and content sync');
    } else {
      console.log('üíî Pi Display heartbeat skipped - not connected');
    }
  }, 30000); // Every 30 seconds

  // Request content update when page loads
  window.addEventListener('load', () => {
    console.log('üñ•Ô∏è Pi Display page loaded, requesting active content...');
    if (socket.connected) {
      socket.emit('get_active_content');
    }
  });

  // Debug connection status every 15 seconds
  setInterval(() => {
    console.log('üîç Pi Display connection status:', {
      connected: socket.connected,
      id: socket.id,
      reconnectAttempts: reconnectAttempts
    });
  }, 15000);
</script> 